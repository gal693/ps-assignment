{"ast":null,"code":"var _jsxFileName = \"/Users/galkatz/Desktop/\\uD83D\\uDCBB/VSCode/ps-assignment-main/src/components/MovieList/MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchMovies } from '@/services/api';\nimport MovieItem from '@/components/MovieItem/MovieItem';\nimport Loading from '@/components/Loading/Loading';\nimport \"../../styles/MovieList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MovieList({\n  onMovieSelect,\n  favorites,\n  myFavorittesToggle\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function getMovies() {\n      try {\n        const data = await fetchMovies();\n        data.sort((a, b) => a.episode_id - b.episode_id);\n        setMovies(data);\n        onMovieSelect(data[0]);\n      } catch (error) {\n        console.error(\"Failed fetching movies:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, []);\n\n  // Added a rule to check if 'myFavorittesToggle' is true, if so iterate through the favorites,\n  // else iterate through 'movies'.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {\n      message: \"Loading Movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this) : myFavorittesToggle ? favorites.map(movie => /*#__PURE__*/_jsxDEV(MovieItem, {\n      className: \"movie-item\",\n      movie: movie,\n      onMovieSelect: onMovieSelect\n    }, movie.episode_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this)) : movies.map(movie => /*#__PURE__*/_jsxDEV(MovieItem, {\n      className: \"movie-item\",\n      movie: movie,\n      onMovieSelect: onMovieSelect\n    }, movie.episode_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(MovieList, \"BSwq18b0190zoSr/8nItHD6xJCs=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useState","useEffect","fetchMovies","MovieItem","Loading","jsxDEV","_jsxDEV","MovieList","onMovieSelect","favorites","myFavorittesToggle","_s","movies","setMovies","isLoading","setIsLoading","getMovies","data","sort","a","b","episode_id","error","console","className","children","message","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","_c","$RefreshReg$"],"sources":["/Users/galkatz/Desktop/ðŸ’»/VSCode/ps-assignment-main/src/components/MovieList/MovieList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchMovies } from '@/services/api';\nimport MovieItem from '@/components/MovieItem/MovieItem';\nimport Loading from '@/components/Loading/Loading';\nimport \"../../styles/MovieList.css\"\n\nfunction MovieList({ onMovieSelect, favorites, myFavorittesToggle }) {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    async function getMovies() {\n      try {\n        const data = await fetchMovies();\n        data.sort((a, b) => a.episode_id - b.episode_id); \n        setMovies(data);\n        onMovieSelect(data[0])\n      } catch (error) {\n        console.error(\"Failed fetching movies:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getMovies();\n  }, []);\n\n  // Added a rule to check if 'myFavorittesToggle' is true, if so iterate through the favorites,\n  // else iterate through 'movies'.\n  return (\n    <div className=\"row\">\n        {isLoading ? (\n            <Loading message=\"Loading Movies...\"/>\n      ) : myFavorittesToggle ?\n        (favorites.map(movie => (\n          <MovieItem className='movie-item' key={movie.episode_id} movie={movie} onMovieSelect={onMovieSelect} />\n        ))\n          ) : (\n          movies.map(movie => (\n            <MovieItem className='movie-item' key={movie.episode_id} movie={movie} onMovieSelect={onMovieSelect} />\n          ))\n        )}\n      </div>\n);\n}\n\nexport default MovieList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAOC,OAAO,MAAM,8BAA8B;AAClD,OAAO,4BAA4B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,SAASA,CAAC;EAAEC,aAAa;EAAEC,SAAS;EAAEC;AAAmB,CAAC,EAAE;EAAAC,EAAA;EACnE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,eAAee,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMf,WAAW,CAAC,CAAC;QAChCe,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,UAAU,GAAGD,CAAC,CAACC,UAAU,CAAC;QAChDR,SAAS,CAACI,IAAI,CAAC;QACfT,aAAa,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,SAAS;QACRP,YAAY,CAAC,KAAK,CAAC;MACrB;IACF;IAEAC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA,oBACEV,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,EACfX,SAAS,gBACNR,OAAA,CAACF,OAAO;MAACsB,OAAO,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,GACxCpB,kBAAkB,GACnBD,SAAS,CAACsB,GAAG,CAACC,KAAK,iBAClB1B,OAAA,CAACH,SAAS;MAACqB,SAAS,EAAC,YAAY;MAAwBQ,KAAK,EAAEA,KAAM;MAACxB,aAAa,EAAEA;IAAc,GAA7DwB,KAAK,CAACX,UAAU;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA+C,CACvG,CAAC,GAEAlB,MAAM,CAACmB,GAAG,CAACC,KAAK,iBACd1B,OAAA,CAACH,SAAS;MAACqB,SAAS,EAAC,YAAY;MAAwBQ,KAAK,EAAEA,KAAM;MAACxB,aAAa,EAAEA;IAAc,GAA7DwB,KAAK,CAACX,UAAU;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA+C,CACvG;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEZ;AAACnB,EAAA,CAtCQJ,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AAwClB,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}